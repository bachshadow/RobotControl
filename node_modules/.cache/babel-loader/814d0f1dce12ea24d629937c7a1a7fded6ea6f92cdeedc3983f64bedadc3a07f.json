{"ast":null,"code":"import\"./customBlocks/custom_Blocks\";import Blockly from\"blockly\";import{pythonGenerator}from\"blockly/python\";import{BlocklyWorkspace}from\"react-blockly\";import{PureComponent}from\"react\";import React,{useState}from\"react\";import\"./App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const initialXml='<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>';const toolbox={kind:\"categoryToolbox\",contents:[/*{\n      kind: \"category\",\n      name: \"Logic\",\n      colour: \"#5b80a5\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n          fields: {\n            OP: \"EQ\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n          fields: {\n            OP: \"AND\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_boolean\",\n          fields: {\n            BOOL: \"TRUE\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_null\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_ternary\"\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Loops\",\n      colour: \"#5ba55b\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          values: {\n            TIMES: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n          fields: {\n            MODE: \"WHILE\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: {\n              id: \"XECl4GVs-^+[?1V:UI%Z\",\n              name: \"i\"\n            }\n          },\n          values: {\n            FROM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            TO: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            },\n            BY: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_forEach\",\n          fields: {\n            VAR: {\n              id: \"zbX-3A%GYRcl`Ngw=KCn\",\n              name: \"j\"\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_flow_statements\",\n          fields: {\n            FLOW: \"BREAK\"\n          }\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Math\",\n      colour: \"#5b67a5\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: {\n            NUM: \"0\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\"\n          },\n          values: {\n            A: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            B: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_single\",\n          fields: {\n            OP: \"ROOT\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"9\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_trig\",\n          fields: {\n            OP: \"SIN\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"45\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_constant\",\n          fields: {\n            CONSTANT: \"PI\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_number_property\",\n          fields: {\n            PROPERTY: \"EVEN\"\n          },\n          values: {\n            NUMBER_TO_CHECK: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"0\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_round\",\n          fields: {\n            OP: \"ROUND\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"3.1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_on_list\",\n          mutation: {\n            op: \"SUM\"\n          },\n          fields: {\n            OP: \"SUM\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_modulo\",\n          values: {\n            DIVIDEND: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"64\"\n              }\n            },\n            DIVISOR: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_constrain\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"50\"\n              }\n            },\n            LOW: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            HIGH: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"100\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_random_int\",\n          values: {\n            FROM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            TO: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"100\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_random_float\"\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Text\",\n      colour: \"#5ba58c\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"text\",\n          fields: {\n            TEXT: \"\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_join\",\n          mutation: {\n            items: \"2\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_append\",\n          fields: {\n            VAR: {\n              id: \"7j+{(eU@3Nf`G7G@/J%}\",\n              name: \"item\"\n            }\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_length\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_isEmpty\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_indexOf\",\n          fields: {\n            END: \"FIRST\"\n          },\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            },\n            FIND: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_charAt\",\n          mutation: {\n            at: \"true\"\n          },\n          fields: {\n            WHERE: \"FROM_START\"\n          },\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_getSubstring\",\n          mutation: {\n            at1: \"true\",\n            at2: \"true\"\n          },\n          fields: {\n            WHERE1: \"FROM_START\",\n            WHERE2: \"FROM_START\"\n          },\n          values: {\n            STRING: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_changeCase\",\n          fields: {\n            CASE: \"UPPERCASE\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_trim\",\n          fields: {\n            MODE: \"BOTH\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_print\",\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_prompt_ext\",\n          mutation: {\n            type: \"TEXT\"\n          },\n          fields: {\n            TYPE: \"TEXT\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        }\n      ]\n    },\n    {\n      kind: \"sep\"\n    },\n    {\n      kind: \"category\",\n      name: \"Variables\",\n      colour: \"#a55b80\",\n      custom: \"VARIABLE\"\n    },\n    {\n      kind: \"category\",\n      name: \"Functions\",\n      colour: \"#995ba5\",\n      custom: \"PROCEDURE\"\n    },\n    {\n      kind: \"sep\"\n    },*/{kind:\"category\",name:\"Move\",colour:\"#3A81A3\",contents:[{kind:\"block\",type:\"move\"}]},{kind:\"sep\"},{kind:\"category\",name:\"Rotate\",colour:\"#39A1A3\",contents:[{kind:\"block\",type:\"rotate\"}]}]};function sendDataToBackend(data){//chuyển đổi dữ liệu thành JSON\nconst jsonData=JSON.stringify(data);// Tạo một yêu cầu Fetch\nfetch('sqlalchemy.url',{//thay url backend vào\nmethod:'POST',headers:{'Content-Type':'application/json'},body:jsonData}).then(response=>{if(!response.ok){throw new Error('Network response was not ok');}return response.json();// Phân tích phản hồi JSON nếu cần\n}).then(data=>{console.log('Data sent successfully:',data);//Xử lý phản hồi từ backend (nếu cần)\n}).catch(error=>{console.error('There was a problem with your fetch operation:',error);});}class BlocklyComponent extends PureComponent{constructor(props){super(props);this.handleGenerateJSCode=()=>{//const jsCode = javascriptGenerator.workspaceToCode();\nconst pythonCode=pythonGenerator.workspaceToCode();this.setState({pythonCode});sendDataToBackend(pythonCode);console.log(pythonCode);console.log(this.state.xml);};this.handleXmlChange=xml=>{this.setState({xml});};this.handleWorkspaceChange=workspace=>{//const jsCode = Blockly.JavaScript.workspaceToCode(workspace);\nconst pythonCode=Blockly.Python.workspaceToCode(workspace);this.state({pythonCode});};this.state={xml:\"\",pythonCode:\"\"};}render(){return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"React Blockly\"}),/*#__PURE__*/_jsx(BlocklyWorkspace,{className:\"blockly_container\",initialXml:initialXml,toolboxConfiguration:toolbox,workspaceConfiguration:{grid:{spacing:20,length:5,colour:\"#ccc\",snap:true}},onXmlChange:this.handleXmlChange}),/*#__PURE__*/_jsx(\"button\",{onClick:this.handleGenerateJSCode,children:\"Generate Python Code\"}),/*#__PURE__*/_jsx(\"div\",{children:this.state.pythonCode})]});}}export default BlocklyComponent;","map":{"version":3,"names":["Blockly","pythonGenerator","BlocklyWorkspace","PureComponent","React","useState","jsx","_jsx","jsxs","_jsxs","initialXml","toolbox","kind","contents","name","colour","type","sendDataToBackend","data","jsonData","JSON","stringify","fetch","method","headers","body","then","response","ok","Error","json","console","log","catch","error","BlocklyComponent","constructor","props","handleGenerateJSCode","pythonCode","workspaceToCode","setState","state","xml","handleXmlChange","handleWorkspaceChange","workspace","Python","render","className","children","toolboxConfiguration","workspaceConfiguration","grid","spacing","length","snap","onXmlChange","onClick"],"sources":["/workspaces/RobotControl/src/App.js"],"sourcesContent":["import \"./customBlocks/custom_Blocks\";\nimport Blockly from \"blockly\";\nimport { pythonGenerator } from \"blockly/python\"\nimport { BlocklyWorkspace } from \"react-blockly\";\nimport { PureComponent } from \"react\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst initialXml = '<xml xmlns=\"http://www.w3.org/1999/xhtml\"></xml>';\nconst toolbox = {\n  kind: \"categoryToolbox\",\n  contents: [\n    /*{\n      kind: \"category\",\n      name: \"Logic\",\n      colour: \"#5b80a5\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n          fields: {\n            OP: \"EQ\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n          fields: {\n            OP: \"AND\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_boolean\",\n          fields: {\n            BOOL: \"TRUE\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"logic_null\"\n        },\n        {\n          kind: \"block\",\n          type: \"logic_ternary\"\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Loops\",\n      colour: \"#5ba55b\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          values: {\n            TIMES: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n          fields: {\n            MODE: \"WHILE\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: {\n              id: \"XECl4GVs-^+[?1V:UI%Z\",\n              name: \"i\"\n            }\n          },\n          values: {\n            FROM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            TO: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            },\n            BY: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_forEach\",\n          fields: {\n            VAR: {\n              id: \"zbX-3A%GYRcl`Ngw=KCn\",\n              name: \"j\"\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"controls_flow_statements\",\n          fields: {\n            FLOW: \"BREAK\"\n          }\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Math\",\n      colour: \"#5b67a5\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: {\n            NUM: \"0\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\"\n          },\n          values: {\n            A: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            B: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_single\",\n          fields: {\n            OP: \"ROOT\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"9\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_trig\",\n          fields: {\n            OP: \"SIN\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"45\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_constant\",\n          fields: {\n            CONSTANT: \"PI\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_number_property\",\n          fields: {\n            PROPERTY: \"EVEN\"\n          },\n          values: {\n            NUMBER_TO_CHECK: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"0\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_round\",\n          fields: {\n            OP: \"ROUND\"\n          },\n          values: {\n            NUM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"3.1\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_on_list\",\n          mutation: {\n            op: \"SUM\"\n          },\n          fields: {\n            OP: \"SUM\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_modulo\",\n          values: {\n            DIVIDEND: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"64\"\n              }\n            },\n            DIVISOR: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"10\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_constrain\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"50\"\n              }\n            },\n            LOW: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            HIGH: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"100\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_random_int\",\n          values: {\n            FROM: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"1\"\n              }\n            },\n            TO: {\n              kind: \"block\",\n              type: \"math_number\",\n              fields: {\n                NUM: \"100\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"math_random_float\"\n        }\n      ]\n    },\n    {\n      kind: \"category\",\n      name: \"Text\",\n      colour: \"#5ba58c\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"text\",\n          fields: {\n            TEXT: \"\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_join\",\n          mutation: {\n            items: \"2\"\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_append\",\n          fields: {\n            VAR: {\n              id: \"7j+{(eU@3Nf`G7G@/J%}\",\n              name: \"item\"\n            }\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_length\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_isEmpty\",\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_indexOf\",\n          fields: {\n            END: \"FIRST\"\n          },\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            },\n            FIND: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_charAt\",\n          mutation: {\n            at: \"true\"\n          },\n          fields: {\n            WHERE: \"FROM_START\"\n          },\n          values: {\n            VALUE: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_getSubstring\",\n          mutation: {\n            at1: \"true\",\n            at2: \"true\"\n          },\n          fields: {\n            WHERE1: \"FROM_START\",\n            WHERE2: \"FROM_START\"\n          },\n          values: {\n            STRING: {\n              kind: \"block\",\n              type: \"variables_get\",\n              fields: {\n                VAR: {\n                  id: \",Yd_J]Tvz2@pj)r9I|p$\",\n                  name: \"text\"\n                }\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_changeCase\",\n          fields: {\n            CASE: \"UPPERCASE\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_trim\",\n          fields: {\n            MODE: \"BOTH\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_print\",\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        },\n        {\n          kind: \"block\",\n          type: \"text_prompt_ext\",\n          mutation: {\n            type: \"TEXT\"\n          },\n          fields: {\n            TYPE: \"TEXT\"\n          },\n          values: {\n            TEXT: {\n              kind: \"block\",\n              type: \"text\",\n              fields: {\n                TEXT: \"abc\"\n              }\n            }\n          }\n        }\n      ]\n    },\n    {\n      kind: \"sep\"\n    },\n    {\n      kind: \"category\",\n      name: \"Variables\",\n      colour: \"#a55b80\",\n      custom: \"VARIABLE\"\n    },\n    {\n      kind: \"category\",\n      name: \"Functions\",\n      colour: \"#995ba5\",\n      custom: \"PROCEDURE\"\n    },\n    {\n      kind: \"sep\"\n    },*/ \n    { \n      kind: \"category\",\n      name: \"Move\",\n      colour: \"#3A81A3\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"move\"\n        },\n        \n      ]\n    },\n    {\n      kind: \"sep\"\n    }, \n    { \n      kind: \"category\",\n      name: \"Rotate\",\n      colour: \"#39A1A3\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"rotate\"\n        },\n        \n      ]\n    },\n  ]\n};\n\nfunction sendDataToBackend(data) {\n\n    //chuyển đổi dữ liệu thành JSON\n    const jsonData = JSON.stringify(data);\n    \n    // Tạo một yêu cầu Fetch\n    fetch('sqlalchemy.url' , { //thay url backend vào\n      method: 'POST' ,\n      headers: {\n       'Content-Type': 'application/json'\n      },\n      body: jsonData\n    })\n    .then(response => {\n     if(!response.ok) {\n      throw new Error('Network response was not ok');\n     }\n     return response.json(); // Phân tích phản hồi JSON nếu cần\n    })\n    .then(data => {\n     console.log('Data sent successfully:', data);\n     //Xử lý phản hồi từ backend (nếu cần)\n     })\n     .catch(error => {\n       console.error('There was a problem with your fetch operation:', error);\n     });  \n}\n\nclass BlocklyComponent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xml: \"\",\n      pythonCode: \"\"\n    };\n  }\n\n  handleGenerateJSCode = () => {\n    //const jsCode = javascriptGenerator.workspaceToCode();\n    const pythonCode = pythonGenerator.workspaceToCode();\n    \n    this.setState({ pythonCode });\n    \n    sendDataToBackend(pythonCode);\n    \n    \n    console.log(pythonCode);\n    console.log(this.state.xml);\n    \n    \n  };\n\n  handleXmlChange = (xml) => {\n    this.setState({ xml });\n  };\n\n  handleWorkspaceChange = (workspace) => {\n    //const jsCode = Blockly.JavaScript.workspaceToCode(workspace);\n    const pythonCode = Blockly.Python.workspaceToCode(workspace);\n    this.state({ pythonCode });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>React Blockly</h1>\n        \n        <BlocklyWorkspace\n          className=\"blockly_container\"\n          initialXml={initialXml}\n          toolboxConfiguration={toolbox}\n          workspaceConfiguration={{\n            grid: {\n              spacing: 20,\n              length: 5,\n              colour: \"#ccc\",\n              snap: true\n            }\n          }}\n          onXmlChange={this.handleXmlChange}\n        />\n        <button onClick={this.handleGenerateJSCode} >Generate Python Code</button>\n        <div>{this.state.pythonCode}</div>\n        \n      </div>\n    );\n  }\n}\n\nexport default BlocklyComponent;\n\n"],"mappings":"AAAA,MAAO,8BAA8B,CACrC,MAAO,CAAAA,OAAO,KAAM,SAAS,CAC7B,OAASC,eAAe,KAAQ,gBAAgB,CAChD,OAASC,gBAAgB,KAAQ,eAAe,CAChD,OAASC,aAAa,KAAQ,OAAO,CACrC,MAAO,CAAAC,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnB,KAAM,CAAAC,UAAU,CAAG,kDAAkD,CACrE,KAAM,CAAAC,OAAO,CAAG,CACdC,IAAI,CAAE,iBAAiB,CACvBC,QAAQ,CAAE,CACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QACI,CACED,IAAI,CAAE,UAAU,CAChBE,IAAI,CAAE,MAAM,CACZC,MAAM,CAAE,SAAS,CACjBF,QAAQ,CAAE,CACR,CACED,IAAI,CAAE,OAAO,CACbI,IAAI,CAAE,MACR,CAAC,CAGL,CAAC,CACD,CACEJ,IAAI,CAAE,KACR,CAAC,CACD,CACEA,IAAI,CAAE,UAAU,CAChBE,IAAI,CAAE,QAAQ,CACdC,MAAM,CAAE,SAAS,CACjBF,QAAQ,CAAE,CACR,CACED,IAAI,CAAE,OAAO,CACbI,IAAI,CAAE,QACR,CAAC,CAGL,CAAC,CAEL,CAAC,CAED,QAAS,CAAAC,iBAAiBA,CAACC,IAAI,CAAE,CAE7B;AACA,KAAM,CAAAC,QAAQ,CAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAErC;AACAI,KAAK,CAAC,gBAAgB,CAAG,CAAE;AACzBC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACR,cAAc,CAAE,kBACjB,CAAC,CACDC,IAAI,CAAEN,QACR,CAAC,CAAC,CACDO,IAAI,CAACC,QAAQ,EAAI,CACjB,GAAG,CAACA,QAAQ,CAACC,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAC/C,CACA,MAAO,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAE;AACzB,CAAC,CAAC,CACDJ,IAAI,CAACR,IAAI,EAAI,CACba,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEd,IAAI,CAAC,CAC5C;AACA,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,EAAI,CACdH,OAAO,CAACG,KAAK,CAAC,gDAAgD,CAAEA,KAAK,CAAC,CACxE,CAAC,CAAC,CACP,CAEA,KAAM,CAAAC,gBAAgB,QAAS,CAAAhC,aAAc,CAC3CiC,WAAWA,CAACC,KAAK,CAAE,CACjB,KAAK,CAACA,KAAK,CAAC,CAAC,KAOfC,oBAAoB,CAAG,IAAM,CAC3B;AACA,KAAM,CAAAC,UAAU,CAAGtC,eAAe,CAACuC,eAAe,CAAC,CAAC,CAEpD,IAAI,CAACC,QAAQ,CAAC,CAAEF,UAAW,CAAC,CAAC,CAE7BtB,iBAAiB,CAACsB,UAAU,CAAC,CAG7BR,OAAO,CAACC,GAAG,CAACO,UAAU,CAAC,CACvBR,OAAO,CAACC,GAAG,CAAC,IAAI,CAACU,KAAK,CAACC,GAAG,CAAC,CAG7B,CAAC,MAEDC,eAAe,CAAID,GAAG,EAAK,CACzB,IAAI,CAACF,QAAQ,CAAC,CAAEE,GAAI,CAAC,CAAC,CACxB,CAAC,MAEDE,qBAAqB,CAAIC,SAAS,EAAK,CACrC;AACA,KAAM,CAAAP,UAAU,CAAGvC,OAAO,CAAC+C,MAAM,CAACP,eAAe,CAACM,SAAS,CAAC,CAC5D,IAAI,CAACJ,KAAK,CAAC,CAAEH,UAAW,CAAC,CAAC,CAC5B,CAAC,CA7BC,IAAI,CAACG,KAAK,CAAG,CACXC,GAAG,CAAE,EAAE,CACPJ,UAAU,CAAE,EACd,CAAC,CACH,CA2BAS,MAAMA,CAAA,CAAG,CACP,mBACEvC,KAAA,QAAKwC,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB3C,IAAA,OAAA2C,QAAA,CAAI,eAAa,CAAI,CAAC,cAEtB3C,IAAA,CAACL,gBAAgB,EACf+C,SAAS,CAAC,mBAAmB,CAC7BvC,UAAU,CAAEA,UAAW,CACvByC,oBAAoB,CAAExC,OAAQ,CAC9ByC,sBAAsB,CAAE,CACtBC,IAAI,CAAE,CACJC,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,CAAC,CACTxC,MAAM,CAAE,MAAM,CACdyC,IAAI,CAAE,IACR,CACF,CAAE,CACFC,WAAW,CAAE,IAAI,CAACb,eAAgB,CACnC,CAAC,cACFrC,IAAA,WAAQmD,OAAO,CAAE,IAAI,CAACpB,oBAAqB,CAAAY,QAAA,CAAE,sBAAoB,CAAQ,CAAC,cAC1E3C,IAAA,QAAA2C,QAAA,CAAM,IAAI,CAACR,KAAK,CAACH,UAAU,CAAM,CAAC,EAE/B,CAAC,CAEV,CACF,CAEA,cAAe,CAAAJ,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}